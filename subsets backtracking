
'''
Given an integer array nums of unique elements, return all possible 
subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Example 2:
Input: nums = [0]
Output: [[],[0]]

Base Case: If we reach the end of the array, add the current subset to the result list.

Recursive Case: For each element, we have two choices:
Include the current element in the subset.
Exclude the current element from the subset.

Track the Current Subset: Use a list to keep track of the current subset during recursion.

Result Storage: Use a list of lists to store all the subsets.

'''

def subsets(nums):
    result = []
    n = len(nums)

    # DFS function to generate subsets.
    def dfs(start, path):
        # append the subset denoted by path
        result.append(path)
        
        # iterate over the indexes from 'start' to the end of the array
        for i in range(start, n):
            # dfs for the remaining part of the array
            dfs(i + 1, path + [nums[i]])

    # Generate subsets, starting with an empty path.
    dfs(0, [])
    return result

# Test cases
print(subsets([1, 2, 3])) # Example 1
print(subsets([0]))       # Example 2
print(subsets([1, 2]))    # Example 3
print(subsets([]))        # Example 4
print(subsets([4, 5, 6, 7])) # Example 5
